[{"/Users/katiefriis/Documents/course/cs2952v/tech-data-viz/src/index.js":"1","/Users/katiefriis/Documents/course/cs2952v/tech-data-viz/src/reportWebVitals.js":"2","/Users/katiefriis/Documents/course/cs2952v/tech-data-viz/src/App.jsx":"3","/Users/katiefriis/Documents/course/cs2952v/tech-data-viz/src/BubbleChart.jsx":"4","/Users/katiefriis/Documents/course/cs2952v/tech-data-viz/src/ScatterPlot.jsx":"5","/Users/katiefriis/Documents/course/cs2952v/tech-data-viz/src/BarChart.jsx":"6"},{"size":500,"mtime":499162500000,"results":"7","hashOfConfig":"8"},{"size":362,"mtime":499162500000,"results":"9","hashOfConfig":"8"},{"size":14375,"mtime":1607726569668,"results":"10","hashOfConfig":"8"},{"size":4534,"mtime":1607723116083,"results":"11","hashOfConfig":"8"},{"size":5748,"mtime":1607726024502,"results":"12","hashOfConfig":"8"},{"size":5915,"mtime":1607726816635,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},"uvbdxb",{"filePath":"17","messages":"18","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"19","messages":"20","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"21","messages":"22","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"23","usedDeprecatedRules":"16"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"26","usedDeprecatedRules":"16"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/Users/katiefriis/Documents/course/cs2952v/tech-data-viz/src/index.js",[],["29","30"],"/Users/katiefriis/Documents/course/cs2952v/tech-data-viz/src/reportWebVitals.js",[],"/Users/katiefriis/Documents/course/cs2952v/tech-data-viz/src/App.jsx",["31","32","33"],"/Users/katiefriis/Documents/course/cs2952v/tech-data-viz/src/BubbleChart.jsx",["34","35","36"],"import React, { Component } from 'react'\nimport './App.css'\n\nimport * as d3 from \"d3\";\nimport BubbleData from './data/counts/adj_counts/companies_adj_counts.csv'\n\nconst margin = {top: 30, right: 20, bottom: 30, left: 100}\n\nconst MAX_WIDTH = Math.max(1080, window.innerWidth);\nconst MAX_HEIGHT = 720;\n\nlet BUBBLES_WIDTH = 1200, BUBBLES_HEIGHT = 630;\n\n// location to centre the bubbles\nconst centre = { x: window.innerWidth/2 -50, y: BUBBLES_HEIGHT/2 };\n\nlet COLORS_BUBBLE = ['#ffa600',\n    '#ff6e54',\n    '#dd5182',\n    '#955196',\n    '#444e86']\n\n\n\nclass BubbleChart extends Component {\n   constructor(props){\n      super(props)\n      this.startBubble = this.startBubble.bind(this)\n\n   }\n   componentDidMount() {\n      this.startBubble();\n   }\n   componentDidUpdate() {\n      this.startBubble();\n   }\n\n   startBubble = () => {      \n\n    let svg = d3.select(this.refs.chart)\n        .append('svg')\n        .attr('width', BUBBLES_WIDTH)\n        .attr('height', BUBBLES_HEIGHT)\n\n    d3.csv(BubbleData).then(function(data) {\n\n        // strength to apply to the position forces\n        const forceStrength = 0.03;\n        \n        // these will be set in createNodes and chart functions\n        let bubbles = null;\n        let labels = null;\n        let nodes = [];\n\n        // create a force simulation and add forces to it\n        const simulation = d3.forceSimulation()\n            .force('charge', d3.forceManyBody().strength(d => Math.pow(d.radius, 2.0) * 0.01))\n            // .force('center', d3.forceCenter(centre.x, centre.y))\n            .force('x', d3.forceX().strength(forceStrength).x(centre.x))\n            .force('y', d3.forceY().strength(forceStrength*2).y(centre.y))\n            .force('collision', d3.forceCollide().radius(d => d.radius + 1));\n\n        // force simulation starts up automatically, which we don't want as there aren't any nodes yet\n        simulation.stop();\n\n        // set up colour scale\n        const fillColour = d3.scaleOrdinal()\n            .domain([\"1\", \"2\", \"3\", \"4\", \"5\"])\n            .range(COLORS_BUBBLE);\n\n        let rawData = data.slice(0,40)\n\n\n        // data manipulation function takes raw data from csv and converts it into an array of node objects\n        // each node will store data and visualisation values to draw a bubble\n        // rawData is expected to be an array of data objects, read in d3.csv\n        // function returns the new node array, with a node for each element in the rawData input\n    \n        // use max size in the data as the max in the scale's domain\n        // note we have to ensure that size is a number\n        const maxSize = d3.max(rawData, d => +d.count);\n\n        // size bubbles based on area\n        const radiusScale = d3.scaleSqrt()\n            .domain([0, maxSize])\n            .range([0, 80])\n\n        // use map() to convert raw data into node data\n        nodes = rawData.map(d => ({\n            ...d,\n            radius: radiusScale(+d.count),\n            size: +d.count,\n            x: Math.random() * 900,\n            y: Math.random() * 800\n        }))\n\n        // callback function called after every tick of the force simulation\n        // here we do the actual repositioning of the circles based on current x and y value of their bound node data\n        // x and y values are modified by the force simulation\n        const ticked = () => {\n            bubbles\n                .attr('cx', d => d.x)\n                .attr('cy', d => d.y)\n\n            labels\n                .attr('x', d => d.x)\n                .attr('y', d => d.y)\n        }\n\n\n        // bind nodes data to circle elements\n        const elements = svg.selectAll('.bubble')\n            .data(nodes, d => d.word)\n            .enter()\n            .append('g')\n\n        bubbles = elements\n            .append('circle')\n            .classed('bubble', true)\n            .attr('r', d => d.radius)\n            .attr('fill', d => fillColour(d.group))\n\n        // labels\n        labels = elements\n            .append('text')\n            .attr('dy', '.3em')\n            .style('text-anchor', 'middle')\n            .style('font-size', 14)\n            .text(d => d.word)\n\n        // set simulation's nodes to our newly created nodes array\n        // simulation starts running automatically once nodes are set\n        simulation.nodes(nodes)\n            .on('tick', ticked)\n            .restart();\n\n         }).catch(function(err) {\n            throw err;\n      });\n   }\n\n\nrender() {\n      return (\n         <div ref =\"chart\">\n         </div>\n\n      )\n   }\n}\nexport default BubbleChart","/Users/katiefriis/Documents/course/cs2952v/tech-data-viz/src/ScatterPlot.jsx",["37","38","39","40","41","42"],"import React, {Component} from \"react\";\nimport { scaleLinear } from \"d3-scale\";\nimport {extent} from \"d3-array\"\nimport * as d3 from \"d3\";\nimport d3Tip from \"d3-tip\";\nimport ScatterData from './data/counts/sentiments.csv'\n\nlet COLORS = {\"news\":'#ff6e54',\n    \"company\":'#dd5182',\n    \"academia\":'#955196',\n    \"defense\":\"#444e86\"}\n\n    // let COLORS_BUBBLE = ['#ffa600',\n    // '#ff6e54',\n    // '#dd5182',\n    // '#955196',\n    // '#444e86']\n\n// Scatterplot\nclass ScatterPlot extends React.Component {\n    constructor(props) {\n        super(props);\n\n    }\n    componentDidMount() {\n        this.startScatter(this.refs.scatterChart);\n    }\n    // Whenever the component updates, select the <g> from the DOM, and use D3 to manipulte circles\n    componentDidUpdate() {\n        this.startScatter(this.refs.scatterChart);\n    }\n \n    startScatter = (div_id) => {\n        // set the dimensions and margins of the graph\n        var margin = {top: 10, right: 30, bottom: 50, left: 60},\n        width = 860 - margin.left - margin.right,\n        height = 450 - margin.top - margin.bottom;\n\n        // append the svg object to the body of the page\n        let svg_scatter = d3.select(div_id)\n            .append(\"svg\")\n            .attr(\"width\", width + margin.left + margin.right)\n            .attr(\"height\", height + margin.top + margin.bottom)\n            .append(\"g\")\n            .attr(\"transform\",\n                \"translate(\" + margin.left + \",\" + margin.top + \")\");\n\n        let tooltip = d3.select(div_id)\n            .append(\"div\")\n            .attr(\"class\", \"tooltip\")\n            .style(\"opacity\", 0);\n\n        //Read the data\n        d3.csv(ScatterData).then(function(data) {\n\n            // data.forEach(function(d) {\n            //     d.subjectivity = +d.subjectivity;\n            //     d.polarity = +d.polarity;\n            // });\n\n\n            console.log(data)\n            // Add X axis\n            var x = d3.scaleLinear()\n                .domain([-1, 1])\n                .range([ 0, width ]);\n                \n            svg_scatter.append(\"g\")\n                .attr(\"transform\", \"translate(0,\" + height + \")\")\n                .call(d3.axisBottom(x));\n\n            // Add Y axis\n            var y = d3.scaleLinear()\n                .domain([0, 1])\n                .range([ height, 0])\n\n                \n            svg_scatter.append(\"g\")\n                .attr(\"transform\", \"translate(\" + x.range()[1] / 2 + \", 0)\")\n                .call(d3.axisLeft(y));\n\n            // Add dots\n            var dots = svg_scatter.append(\"g\")\n                .selectAll(\"dot\")\n                .data(data)\n            \n            const mouseover = (event, d) => {\n                console.log(\"mouseover\")\n                console.log(\"event\", event)\n                console.log(\"pointer\", d3.pointer(event))\n                let color_span = `<span style=\"color: #69b3a2;\">`;\n\n\n                let html = `<h5 style=\"color:${COLORS[d.type]}\">${d.source}</h5>\n                            <span>Polarity: ${parseFloat(d.polarity).toFixed(2)} </span><br/>\n                            <span>Subjectivity: ${parseFloat(d.subjectivity).toFixed(2)} </span>`;\n\n            \n                // Show the tooltip and set the position relative to the event X and Y location\n                tooltip      \n                .html(html)\n                    .style(\"left\", `${(event.pageX)}px`)\n                    .style(\"top\", `${(event.pageY) +5}px`)\n                    .style(\"box-shadow\", `2px 2px 5px gray`)\n              \n                    .transition()\n                    .duration(200)\n                    .style(\"opacity\", 0.9)\n            };\n    \n            const mouseout = (event, d) => {\n                console.log(\"mouseout\")\n            tooltip.style('opacity', 0);\n            }\n    \n\n\n            dots.enter()\n                .append(\"circle\")\n                // .attr(\"id\", \"circleBasicTooltip\")\n                .attr(\"cx\", (d)=> x(d.polarity))\n                .attr(\"cy\", (d) => y(d.subjectivity))\n                .attr(\"r\", 8)\n                .style(\"fill\", (d)=>COLORS[d.type])\n                .attr(\"class\", \"sDot\")\n                .on(\"mouseout\", mouseout)\n                .on(\"mouseover\", mouseover);\n\n                // .append(\"title\")\n                // .text(\"hello\");\n\n            svg_scatter.append(\"text\")\n                .attr(\"transform\", `translate(${(width) / 2},\n                            ${(height) + 40})`)\n                .style(\"text-anchor\", \"middle\")\n                .text(\"Polarity\");\n\n            svg_scatter.append(\"text\")\n                .attr(\"transform\", `translate(0, ${(height) / 2})rotate(-90)`)       // HINT: Place this at the center left edge of the graph\n                .style(\"text-anchor\", \"middle\")\n                .text(\"Subjectivity\");\n                \n            // svg_scatter.selectAll(\"text\")\n            //     .data(data)\n            //     .enter()\n            //     .append(\"text\")\n\n            // create a tooltip\n            // var tooltip = d3.select(div_id)\n            //     .append(\"div\")\n            //     .style(\"position\", \"absolute\")\n            //     .style(\"visibility\", \"hidden\")\n            //     .text(\"I'm a circle!\");\n            // d3.select(\"#circleBasicTooltip\")\n            // .on(\"mouseover\", function(){return tooltip.style(\"visibility\", \"visible\");})\n            // // .on(\"mousemove\", function(){return tooltip.style(\"top\", (event.pageY-800)+\"px\").style(\"left\",(event.pageX-800)+\"px\");})\n            // .on(\"mouseout\", function(){return tooltip.style(\"visibility\", \"hidden\");});\n        })\n\n    }\n    render() {\n        return (\n            <div ref =\"scatterChart\">\n            <div id=\"tooltip\"/>\n         </div>\n        )\n    }\n}\n\n\n\nexport default ScatterPlot\n\n","/Users/katiefriis/Documents/course/cs2952v/tech-data-viz/src/BarChart.jsx",["43","44","45","46","47","48","49","50"],{"ruleId":"51","replacedBy":"52"},{"ruleId":"53","replacedBy":"54"},{"ruleId":"55","severity":1,"message":"56","line":5,"column":8,"nodeType":"57","messageId":"58","endLine":5,"endColumn":11},{"ruleId":"55","severity":1,"message":"59","line":6,"column":8,"nodeType":"57","messageId":"58","endLine":6,"endColumn":14},{"ruleId":"55","severity":1,"message":"60","line":192,"column":5,"nodeType":"57","messageId":"58","endLine":192,"endColumn":11},{"ruleId":"55","severity":1,"message":"61","line":7,"column":7,"nodeType":"57","messageId":"58","endLine":7,"endColumn":13},{"ruleId":"55","severity":1,"message":"62","line":9,"column":7,"nodeType":"57","messageId":"58","endLine":9,"endColumn":16},{"ruleId":"55","severity":1,"message":"63","line":10,"column":7,"nodeType":"57","messageId":"58","endLine":10,"endColumn":17},{"ruleId":"55","severity":1,"message":"64","line":1,"column":16,"nodeType":"57","messageId":"58","endLine":1,"endColumn":25},{"ruleId":"55","severity":1,"message":"65","line":2,"column":10,"nodeType":"57","messageId":"58","endLine":2,"endColumn":21},{"ruleId":"55","severity":1,"message":"66","line":3,"column":9,"nodeType":"57","messageId":"58","endLine":3,"endColumn":15},{"ruleId":"55","severity":1,"message":"67","line":5,"column":8,"nodeType":"57","messageId":"58","endLine":5,"endColumn":13},{"ruleId":"68","severity":1,"message":"69","line":21,"column":5,"nodeType":"70","messageId":"71","endLine":24,"endColumn":6},{"ruleId":"55","severity":1,"message":"72","line":91,"column":21,"nodeType":"57","messageId":"58","endLine":91,"endColumn":31},{"ruleId":"55","severity":1,"message":"73","line":12,"column":8,"nodeType":"57","messageId":"58","endLine":12,"endColumn":17},{"ruleId":"55","severity":1,"message":"63","line":21,"column":7,"nodeType":"57","messageId":"58","endLine":21,"endColumn":17},{"ruleId":"74","severity":1,"message":"75","line":67,"column":15,"nodeType":"76","messageId":"77","endLine":67,"endColumn":17},{"ruleId":"74","severity":1,"message":"75","line":69,"column":22,"nodeType":"76","messageId":"77","endLine":69,"endColumn":24},{"ruleId":"74","severity":1,"message":"75","line":71,"column":22,"nodeType":"76","messageId":"77","endLine":71,"endColumn":24},{"ruleId":"74","severity":1,"message":"75","line":173,"column":15,"nodeType":"76","messageId":"77","endLine":173,"endColumn":17},{"ruleId":"74","severity":1,"message":"75","line":175,"column":22,"nodeType":"76","messageId":"77","endLine":175,"endColumn":24},{"ruleId":"74","severity":1,"message":"75","line":177,"column":22,"nodeType":"76","messageId":"77","endLine":177,"endColumn":24},"no-native-reassign",["78"],"no-negated-in-lhs",["79"],"no-unused-vars","'Nav' is defined but never used.","Identifier","unusedVar","'Button' is defined but never used.","'COLORS' is assigned a value but never used.","'margin' is assigned a value but never used.","'MAX_WIDTH' is assigned a value but never used.","'MAX_HEIGHT' is assigned a value but never used.","'Component' is defined but never used.","'scaleLinear' is defined but never used.","'extent' is defined but never used.","'d3Tip' is defined but never used.","no-useless-constructor","Useless constructor.","MethodDefinition","noUselessConstructor","'color_span' is assigned a value but never used.","'FormLabel' is defined but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","no-global-assign","no-unsafe-negation"]