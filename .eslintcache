[{"/Users/erinsimshauser/github/tech-data-viz/src/index.js":"1","/Users/erinsimshauser/github/tech-data-viz/src/reportWebVitals.js":"2","/Users/erinsimshauser/github/tech-data-viz/src/App.jsx":"3","/Users/erinsimshauser/github/tech-data-viz/src/BarChart.jsx":"4","/Users/erinsimshauser/github/tech-data-viz/src/ScatterPlot.jsx":"5","/Users/erinsimshauser/github/tech-data-viz/src/BubbleChart.jsx":"6"},{"size":500,"mtime":1607304107035,"results":"7","hashOfConfig":"8"},{"size":362,"mtime":1607304107036,"results":"9","hashOfConfig":"8"},{"size":14375,"mtime":1607738419900,"results":"10","hashOfConfig":"8"},{"size":5915,"mtime":1607738419900,"results":"11","hashOfConfig":"8"},{"size":5748,"mtime":1607738419904,"results":"12","hashOfConfig":"8"},{"size":4534,"mtime":1607738419903,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},"hslgek",{"filePath":"17","messages":"18","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"19","messages":"20","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"21","usedDeprecatedRules":"16"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"24","usedDeprecatedRules":"16"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"27","usedDeprecatedRules":"28"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"31","usedDeprecatedRules":"16"},"/Users/erinsimshauser/github/tech-data-viz/src/index.js",[],["32","33"],"/Users/erinsimshauser/github/tech-data-viz/src/reportWebVitals.js",[],"/Users/erinsimshauser/github/tech-data-viz/src/App.jsx",["34","35","36"],"import React from \"react\";\n\nimport './App.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport Nav from 'react-bootstrap/Nav'\nimport Button from \"@material-ui/core/Button\"\n\nimport DropdownButton from 'react-bootstrap/DropdownButton'\nimport Dropdown from 'react-bootstrap/Dropdown'\nimport ButtonToolbar from 'react-bootstrap/ButtonToolbar'\n\nimport BarChart from \"./BarChart\"\nimport BubbleChart from \"./BubbleChart\"\nimport ScatterPlot from \"./ScatterPlot\"\n\nimport GridList from '@material-ui/core/GridList';\nimport GridListTile from '@material-ui/core/GridListTile';\nimport FiberManualRecordIcon from '@material-ui/icons/FiberManualRecord'\n\nimport InterceptData from './data/counts/total_counts/intercept_total_counts.csv'\nimport VoxData from './data/counts/total_counts/vox_total_counts.csv'\nimport YCombData from './data/counts/total_counts/ycomb_total_counts.csv'\nimport AngelData from './data/counts/total_counts/angelall_total_counts.csv'\nimport CryptoData from './data/counts/total_counts/crypto_total_counts.csv'\nimport BrownData from './data/counts/total_counts/brown_total_counts.csv'\nimport CVData from './data/counts/total_counts/cvpaper_total_counts.csv'\nimport MLData from './data/counts/total_counts/mlpaper_total_counts.csv'\nimport DepDefData from './data/counts/total_counts/depdef_total_counts.csv'\n\nimport InterceptVerbs from './data/counts/verb_counts/intercept_verb_counts.csv'\nimport InterceptAdj from './data/counts/adj_counts/intercept_adj_counts.csv'\n\nimport VoxVerbs from './data/counts/verb_counts/vox_verb_counts.csv'\nimport VoxAdj from './data/counts/adj_counts/vox_adj_counts.csv'\n\nimport YCombVerbs from './data/counts/verb_counts/ycomb_verb_counts.csv'\nimport YCombAdj from './data/counts/adj_counts/ycomb_adj_counts.csv'\n\nimport AngelVerbs from './data/counts/verb_counts/angelall_verb_counts.csv'\nimport AngelAdj from './data/counts/adj_counts/angelall_adj_counts.csv'\n\nimport CryptoVerbs from './data/counts/verb_counts/crypto_verb_counts.csv'\nimport CryptoAdj from './data/counts/adj_counts/crypto_adj_counts.csv'\n\nimport BrownVerbs from './data/counts/verb_counts/brown_verb_counts.csv'\nimport BrownAdj from './data/counts/adj_counts/brown_adj_counts.csv'\n\nimport CVVerbs from './data/counts/verb_counts/cvpaper_verb_counts.csv'\nimport CVAdj from './data/counts/adj_counts/cvpaper_adj_counts.csv'\n\nimport MLVerbs from './data/counts/verb_counts/mlpaper_verb_counts.csv'\nimport MLAdj from './data/counts/adj_counts/mlpaper_adj_counts.csv'\n\nimport DepDefVerbs from './data/counts/verb_counts/depdef_verb_counts.csv'\nimport DepDefAdj from './data/counts/adj_counts/depdef_adj_counts.csv'\n\n\n\nimport NewsData from './data/counts/total_counts/news_total_counts.csv'\nimport CompanyData from './data/counts/total_counts/companies_total_counts.csv'\nimport AcademiaData from './data/counts/total_counts/academia_total_counts.csv'\nimport DefenseData from './data/counts/total_counts/defense_total_counts.csv'\n\nimport NewsVerbs from './data/counts/verb_counts/news_verb_counts.csv'\nimport CompanyVerbs from './data/counts/verb_counts/companies_verb_counts.csv'\nimport AcademiaVerbs from './data/counts/verb_counts/academia_verb_counts.csv'\nimport DefenseVerbs from './data/counts/verb_counts/defense_verb_counts.csv'\n\nimport NewsAdj from './data/counts/adj_counts/news_adj_counts.csv'\nimport CompanyAdj from './data/counts/adj_counts/companies_adj_counts.csv'\nimport AcademiaAdj from './data/counts/adj_counts/academia_adj_counts.csv'\nimport DefenseAdj from './data/counts/adj_counts/defense_adj_counts.csv'\n\n\nlet dataSources = [{\n  \"name\": \"The Intercept\",\n  \"data\": InterceptData,\n  \"verbs\": InterceptVerbs,\n  \"adj\": InterceptAdj,\n  \"color\": '#ffa600',\n  \"type\": \"news\"\n},\n{\n  \"name\": \"Vox\",\n  \"data\": VoxData,\n  \"verbs\": VoxVerbs,\n  \"adj\": VoxAdj,\n  \"color\": '#ff6361',\n  \"type\": \"news\"\n},\n{\n  \"name\": \"AngelList Companies\",\n  \"data\": AngelData,\n  \"verbs\": AngelVerbs,\n  \"adj\": AngelAdj,\n  \"color\": '#bc5090',\n  \"type\": \"companies\"\n},\n{\n  \"name\": \"Y-Combinator Companies\",\n  \"data\": YCombData,\n  \"verbs\": YCombVerbs,\n  \"adj\": YCombAdj,\n  \"color\": '#bc5090',\n  \"type\": \"companies\"\n},\n{\n  \"name\": \"Crypto Conference\",\n  \"data\": CryptoData,\n  \"verbs\": CryptoVerbs,\n  \"adj\": CryptoAdj,\n  \"color\": '#58508d',\n  \"type\": \"academia\"\n},\n{\n  \"name\": \"Brown CS News\",\n  \"data\": BrownData,\n  \"verbs\": BrownVerbs,\n  \"adj\": BrownAdj,\n  \"color\": '#005780',\n  \"type\": \"academia\"\n},\n{\n  \"name\": \"Computer Vision Conference\",\n  \"data\": CVData,\n  \"verbs\": CVVerbs,\n  \"adj\": CVAdj,\n  \"color\": '#58508d',\n  \"type\": \"academia\"\n},\n{\n  \"name\": \"Machine Learning Conference\",\n  \"data\": MLData,\n  \"verbs\": MLVerbs,\n  \"adj\": MLAdj,\n  \"color\": '#58508d',\n  \"type\": \"academia\"\n},\n{\n  \"name\": \"Dept of Defense News\",\n  \"data\": DepDefData,\n  \"verbs\": DepDefVerbs,\n  \"adj\": DepDefAdj,\n  \"color\": '#58508d',\n  \"type\": \"defense\"\n},\n{\n  \"name\": \"AngelList Defense Companies\",\n  \"data\": AngelData,\n  \"verbs\": AngelVerbs,\n  \"adj\": AngelAdj,\n  \"color\": '#58508d',\n  \"type\": \"defense\"\n},\n]\n\nlet aggDataSources = [\n  {\n    \"name\": \"News Outlets\",\n    \"data\": NewsData,\n    \"verbs\": NewsVerbs,\n    \"adj\": NewsAdj,\n    \"color\": '#58508d',\n    \"type\": \"news\"\n  },\n  {\n    \"name\": \"Companies\",\n    \"data\": CompanyData,\n    \"verbs\": CompanyVerbs,\n    \"adj\": CompanyAdj,\n    \"color\": '#58508d',\n    \"type\": \"companies\"\n  },\n  {\n    \"name\": \"Academia\",\n    \"data\": AcademiaData,\n    \"verbs\": AcademiaVerbs,\n    \"adj\": AcademiaAdj,\n    \"color\": '#58508d',\n    \"type\": \"academia\"\n  },\n  {\n    \"name\": \"Defense\",\n    \"data\": DefenseData,\n    \"verbs\": DefenseVerbs,\n    \"adj\": DefenseAdj,\n    \"color\": '#58508d',\n    \"type\": \"defense\"\n  },\n]\n\nlet COLORS = ['#ffa600',\n    '#ff6361',\n    '#bc5090',\n    '#58508d',\n    '#005780']\n\n    let COLORS_DICT = {\"news\":'#ff6e54',\n    \"company\":'#dd5182',\n    \"academia\":'#955196',\n    \"defense\":\"#444e86\"}\n\n\nexport default class App extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      barGridFilter:\"All\"\n    }\n  }\n\n  makeGridTile = (source) => {\n    return (\n      <GridListTile>\n        <BarChart source={source.name} type={source.type} data={source.data} verbData={source.verbs} adjData={source.adj}/>\n      </GridListTile>\n    )\n  }\n\n  // Helper function for displaying the dropdown titles\n  getTitle = (filterName, filterVal) => {\n    return filterName+\" (\"+filterVal+\")\"\n  }\n\n\n  matchesGridFilter = item => {\n    if(this.state.barGridFilter === \"All\")  {\n        return true\n    } else if (this.state.barGridFilter === \"News outlets\" && item.type ===\"news\") {\n        return true\n    } else if (this.state.barGridFilter === \"Companies\" && item.type ===\"companies\") {\n      return true\n    } else if (this.state.barGridFilter === \"Academia\" && item.type ===\"academia\") {\n      return true\n    } else if (this.state.barGridFilter === \"Defense\" && item.type ===\"defense\") {\n      return true\n    } else {\n        return false\n    }\n  }\n\n  filterCharts = event => {\n    this.setState({\n      barGridFilter: event\n    })\n  }\n\n  render() {\n    return (\n      <div>\n          <h2 className=\"text-center mb-4\">Techno-Optmism</h2>\n          <div className=\"navbar\" class=\"sticky-top\" style={{padding: \"1% 0% 1% 0%\"}} bg=\"light\" variant=\"light\">\n          <div class=\"container-fluid\" style={{textAlign: \"center\"}}>\n            <a class=\"navitem\" href=\"#context\">Context</a>\n            <a class=\"navitem\" href=\"#sentiment\">Sentiment</a>\n            <a class=\"navitem\" href=\"#words\">Word Counts</a>\n            <a class=\"navitem\" href=\"#sources\">Sources</a>\n          </div>\n        </div>\n\n              <div id = 'bubble-chart'>\n          <BubbleChart/>\n        </div>\n \n       <div id=\"context\">\n        <h3 >Context</h3>\n        <div className=\"row justify-content-between align-items-center mt-4\">\n          <div className=\"col-md-7\">\n            <p>In this project, we were interested in exploring the trend of techno-optimism, the notion that technology can continually be improved and can continually improve people’s lives and make the world a better place. From class readings and discussions throughout the semester, this notion was repeatedly debunked as we saw example after example of technologies that did more harm than good despite their “for good” framing to the public. This “for good” framing is pervasive throughout the tech community, from startups pitching ideas to VCs, to tech giants mining users’ data, to governments defending mass surveillance. We were interested in exploring these trends more formally, but initially we were not sure exactly how. We came up with the following questions to guide us:\nHow can trends of techno-optimism be quantified and communicated to the public?\nHow do the ways companies describe themselves differ from their true impact?\n</p>\n          </div>\n          <div className=\"col-md-4\" style={{textAlign:\"right\"}}>\n            <h6><i>“Techno-optimism: the belief that technology and technologists are building the future and that the rest of the world, including government, needs to catch up”</i></h6>\n          </div>\n        </div>\n        <div className=\"row justify-content-between align-items-center mt-5\">\n          <div className=\"col-md-4\">\n          <h6><i>“Techno-optimism has deep roots in American political culture, and its belief in American ingenuity and technological progress”</i></h6>\n          </div>\n          <div className=\"col-md-7\" style={{textAlign:\"right\"}}>\n            <p>These questions led us to focusing on the written language that pushes forward overly positive views of technology. We brainstormed various text-based data sources that might have this agenda such as company mission statements and websites, and then brainstormed text-based data sources that might provide contrast such as news articles, court cases, and academia. We created datasets for ourselves using web scraping, then used natural language processing to analyze them to find the most commonly used words, the most common verbs and adjectives, and the sentiment rating of the text as a whole. Finally, we made data visualizations of these results and displayed them on a public website. By quantifying the trends of language used by different technology stakeholders and creating visualizations of them, we sought to reveal the fluff that’s used to make technology seem like an entirely positive, world-changing good and display the dissonance between this language and technology’s true impact.</p>\n          </div>\n        </div>\n        </div>\n        <div id=\"sentiment\">\n          <h3>Sentiment Analysis</h3>\n          <p>\n          <span className=\"tab\"/>\n            <FiberManualRecordIcon style={{fill: COLORS_DICT[\"news\"]}}/> News Outlets <span className=\"tab\"/>\n            <FiberManualRecordIcon style={{fill: COLORS_DICT['company']}}/> Companies <span className=\"tab\"/>\n            <FiberManualRecordIcon style={{fill: COLORS_DICT['academia']}}/> Academia <span className=\"tab\"/>\n            <FiberManualRecordIcon style={{fill: COLORS_DICT['defense']}}/> Defense \n\n          </p>\n          <div id=\"scatter-plot\">\n          <ScatterPlot/>\n\n          </div>\n          <p>We used <a href=\"https://textblob.readthedocs.io/en/dev/\">TextBlob</a> to analyze the sentiment of our datasets along 2 axes: polarity (x axis) and subjectivity (y axis). Polarity measures how positive or negative the text of a source is on a scale of -1 (negative) to 1 (positive).\n            <br></br> <br></br>\n            Subjectivity is measured from a scale of 0 being objective to 1 being subjective. TextBlob measures subjectivity\n            partially by how many adverbs are used (assumes texts with a higher proportion of adverbs are more subjective).\n          </p>\n        </div>\n\n        <h3>Word Counts</h3>\n        <div>\n        <GridList cellHeight={500} cols={2}>\n          {aggDataSources.map(this.makeGridTile)}\n        </GridList>\n        </div>\n\n        <h3 id=\"words\">Word Counts by Source</h3>\n        <ButtonToolbar className=\"toolbar\">\n                <p className=\"toolbar-text\">Viewing:</p>\n                <DropdownButton className=\"dropdown-button\" id=\"dropdown-button\" title={this.state.barGridFilter} size=\"sm\">\n                    <Dropdown.Item eventKey=\"All\" onSelect={this.filterCharts}>All</Dropdown.Item>\n                    <Dropdown.Item eventKey=\"News outlets\" onSelect={this.filterCharts}>News Outlets</Dropdown.Item>\n                    <Dropdown.Item eventKey=\"Companies\" onSelect={this.filterCharts}>Companies</Dropdown.Item>\n                    <Dropdown.Item eventKey=\"Academia\" onSelect={this.filterCharts}>Academia</Dropdown.Item>\n                    <Dropdown.Item eventKey=\"Defense\" onSelect={this.filterCharts}>Defense</Dropdown.Item>\n\n                </DropdownButton>\n        </ButtonToolbar>\n       \n        <GridList cellHeight={500} cols={2}>\n          {dataSources.filter(this.matchesGridFilter).map(this.makeGridTile)}\n        </GridList>\n        {/* <div className = \"row\">\n          <div className=\"col-md-6\">\n            <BarChart source=\"The Intercept\" color='#ffa600' />\n\n          </div>\n          <div className=\"col-md-6\">\n            <BarChart source=\"The Intercept\" color='#ffa600' />\n\n          </div>\n        </div> */}\n        <div id=\"sources\">\n          <h3>Sources</h3>\n          <li><a href=\"https://www.nytimes.com/2019/09/28/opinion/sunday/silicon-valley-techno-optimism.html\">The Church of Techno-Optimism\n</a></li>\n          <li><a href=\"https://angel.co/all-markets\">Angellist</a></li>\n          <li><a href=\"https://www.ycombinator.com/companies/\">YCombinator</a></li>\n          <li><a href=\"https://www.vox.com/recode\">Vox Recode</a></li>\n          <li><a href=\"https://theintercept.com/technology/\">The Intercept</a></li>\n          <li><a href=\"https://www.defense.gov/Newsroom/\">Department of Defense Newsroom</a></li>\n          <li><a href=\"https://www.iacr.org/publications/access.php\">International Association for Cryptologic Research Publications\n</a></li>\n          <li><a href=\"https://openaccess.thecvf.com/ICCV2019?day=2019-10-29\">International Conference on Computer Vision</a></li>\n          <li><a href=\"https://icml.cc/virtual/2020/papers.html?filter=keywords\">International Conference on Machine Learning</a></li>\n          <li><a href=\"https://cs.brown.edu/news/\">Brown Computer Science News</a></li>\n\n        </div>\n      </div>\n    );\n  }\n}\n\n","/Users/erinsimshauser/github/tech-data-viz/src/BarChart.jsx",["37","38","39"],"import React, { Component } from 'react'\nimport './App.css'\n\n// import { scaleLinear, scaleBand } from \"d3-scale\"\n\n// import { max } from 'd3-array'\n// import { select } from 'd3-selection'\n\nimport * as d3 from \"d3\";\nimport FormControl from \"@material-ui/core/FormControl\"\nimport RadioGroup from \"@material-ui/core/RadioGroup\"\nimport FormLabel from \"@material-ui/core/FormLabel\"\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\"\nimport Radio from \"@material-ui/core/Radio\"\n\nconst margin = {top: 30, right: 20, bottom: 30, left: 100}\n// width = 960 - margin.left - margin.right,\n// height = 500 - margin.top - margin.bottom;\n\nconst MAX_WIDTH = Math.max(1080, window.innerWidth);\nconst MAX_HEIGHT = 720;\n\nlet bar_width = (MAX_WIDTH / 2) - 150, bar_height = 400;\n\n\n\nlet BUBBLES_WIDTH = 1200, BUBBLES_HEIGHT = 630;\n\n// location to centre the bubbles\nconst centre = { x: BUBBLES_WIDTH/2, y: BUBBLES_HEIGHT/2 };\n\nlet COLORS = {\"news\":'#ff6361',\n    \"companies\":'#bc5090',\n    \"academia\":'#58508d'}\n   //  '#58508d',\n   //  '#005780'}\n\n\n\nclass BarChart extends Component {\n   constructor(props){\n      super(props)\n      this.state = {\n         radioSelector:\"all\"\n      }\n      this.startBar = this.startBar.bind(this)\n\n   }\n   componentDidMount() {\n      this.startBar(\"\", this.props.path, this.refs.chart, COLORS[this.props.type], this.props.data);\n   }\n   // componentDidUpdate() {\n   //    let i =0\n   //    this.startBar(dataSources[i].name, dataSources[i].path, this.refs.chart, COLORS[i]);\n   // }\n\n   startBar = (source, data_path, div_id, color, data) => {\n      let svg_bar = d3.select(div_id)\n         .append(\"svg\")\n         .attr(\"width\", bar_width)\n         .attr(\"height\", bar_height)\n         .append(\"g\")\n         .attr(\"transform\", `translate(${margin.left}, ${margin.top})`);\n      \n      d3.csv(data).then(function(data) {\n         data.forEach(function(d) {\n            d.count = +d.count;\n         });\n         data = data.slice(0,10)\n         \n         let svg = svg_bar;\n\n         // y axis: words\n         let y = d3.scaleBand()\n         .range([0, bar_height - margin.top - margin.bottom])\n         .padding(0.1);  // Improves readability\n\n\n         // x axis: word counts\n         let x = d3.scaleLinear()\n            .domain([0, d3.max(data, function(d) { return d.count; })])\n            .range([0, bar_width -margin.left - margin.right-15]);\n\n         console.log(x)\n\n         console.log(\"max\", d3.max(data, function(d) { return d.count; }))\n\n         // Set up reference to count SVG group\n         let countRef = svg.append(\"g\");\n\n         let y_axis_label = svg.append(\"g\")\n            .style(\"font-size\", \"16px\");\n\n         let x_axis_text = svg.append(\"text\")\n            .attr(\"transform\", `translate(${(bar_width - margin.left - margin.right) / 2},\n                     ${(bar_height - margin.top - margin.bottom) + 15})`)\n            .style(\"text-anchor\", \"middle\");\n            ;\n\n         // y axis: words\n         y.domain(data.map(function(d) { return d.word; }));\n\n\n         y_axis_label.call(d3.axisLeft(y).tickSize(0).tickPadding(10));\n\n         let bars = svg.selectAll(\"rect\")\n            .data(data, function(d) {return d.word});\n         \n         bars.enter()\n            .append(\"rect\")\n            .merge(bars)\n            .transition()\n            .duration(1000)\n            .attr('fill', color)\n            .attr(\"x\", x(0))\n            .attr(\"y\", function(d) { return y(d.word); })\n            .attr(\"width\", function(d) { return x(parseInt(d.count)); })\n            .attr(\"height\",  y.bandwidth());\n\n         let c = countRef.selectAll(\"text\").data(data);\n\n\n         // Render the text elements on the DOM\n         c.enter()\n            .append(\"text\")\n            .merge(c)\n            .transition()\n            .duration(1000)\n            .attr(\"x\", function(d) { return x(parseInt(d.count)) + 10; })       // HINT: Add a small offset to the right edge of the bar, found by x(d.count)\n            .attr(\"y\", function(d) { return y(d.word) + 17})       // HINT: Add a small offset to the top edge of the bar, found by y(d.artist)\n            .style(\"text-anchor\", \"start\")\n            .text(function(d) { return parseInt(d.count)});\n\n         x_axis_text.text(`# occurrences`);\n\n         // Remove elements not in use if fewer groups in new dataset\n         bars.exit().remove();\n         c.exit().remove();\n\n\n         }).catch(function(err) {\n            throw err;\n      });\n   }\n\n   updateData = event => {\n      console.log(event)\n      this.setState({\n         radioSelector: event.target.value\n      })\n   }\n\nrender() {\n      return (\n         <div ref =\"chart\" className=\"bar-chart\">\n            <h4>{this.props.source}</h4>\n            <div className=\"row justify-content-center\">\n            <FormControl component=\"fieldset\">\n               \n            <RadioGroup row  name=\"gender1\" value={this.state.radioSelector} onChange={this.updateData}>\n               <FormControlLabel value=\"all\" control={<Radio />} label=\"All\" />\n               <FormControlLabel value=\"verbs\" control={<Radio />} label=\"Verbs\" />\n               <FormControlLabel value=\"adjectives\" control={<Radio />} label=\"Adjectives\" />\n            </RadioGroup>\n            </FormControl>\n            </div>\n         </div>\n\n      )\n   }\n}\nexport default BarChart","/Users/erinsimshauser/github/tech-data-viz/src/ScatterPlot.jsx",["40","41","42","43","44"],"import React, {Component} from \"react\";\nimport { scaleLinear } from \"d3-scale\";\nimport {extent} from \"d3-array\"\nimport * as d3 from \"d3\";\nimport d3Tip from \"d3-tip\";\nimport ScatterData from './data/counts/sentiments.csv'\n\nlet COLORS = {\"news\":'#ff6361',\n    \"company\":'#bc5090',\n    \"academia\":'#58508d'}\n\n// Scatterplot\nclass ScatterPlot extends React.Component {\n    constructor(props) {\n        super(props);\n\n    }\n    componentDidMount() {\n        this.startScatter(this.refs.scatterChart);\n    }\n    // Whenever the component updates, select the <g> from the DOM, and use D3 to manipulte circles\n    componentDidUpdate() {\n        this.startScatter(this.refs.scatterChart);\n    }\n \n    startScatter = (div_id) => {\n        // set the dimensions and margins of the graph\n        var margin = {top: 10, right: 30, bottom: 30, left: 60},\n        width = 860 - margin.left - margin.right,\n        height = 600 - margin.top - margin.bottom;\n\n        // append the svg object to the body of the page\n        let svg_scatter = d3.select(div_id)\n            .append(\"svg\")\n            .attr(\"width\", width + margin.left + margin.right)\n            .attr(\"height\", height + margin.top + margin.bottom)\n            .append(\"g\")\n            .attr(\"transform\",\n                \"translate(\" + margin.left + \",\" + margin.top + \")\");\n\n        //Read the data\n        d3.csv(ScatterData).then(function(data) {\n\n            // data.forEach(function(d) {\n            //     d.subjectivity = +d.subjectivity;\n            //     d.polarity = +d.polarity;\n            // });\n\n\n            console.log(data)\n            // Add X axis\n            var x = d3.scaleLinear()\n                .domain([0, 1])\n                .range([ 0, width ]);\n            svg_scatter.append(\"g\")\n                .attr(\"transform\", \"translate(0,\" + height + \")\")\n                .call(d3.axisBottom(x));\n\n            // Add Y axis\n            var y = d3.scaleLinear()\n                .domain([0, 1])\n                .range([ height, 0]);\n                \n            svg_scatter.append(\"g\")\n                .call(d3.axisLeft(y));\n\n            // Add dots\n            var dots = svg_scatter.append(\"g\")\n                .selectAll(\"dot\")\n                .data(data)\n\n            dots.enter()\n                .append(\"circle\")\n                .attr(\"id\", \"circleBasicTooltip\")\n                .attr(\"cx\", (d)=> x(d.polarity))\n                .attr(\"cy\", (d) => y(d.subjectivity))\n                .attr(\"r\", 8)\n                .style(\"fill\", (d)=>COLORS[d.type])\n                .append(\"text\")\n                    // .style(\"text-anchor\", \"middle\")\n                // .attr(\"dy\", -10)\n                    .text((d) => d.source)\n            \n            // create a tooltip\n            var tooltip = d3.select(div_id)\n                .append(\"div\")\n                .style(\"position\", \"absolute\")\n                .style(\"visibility\", \"hidden\")\n                .text(\"I'm a circle!\");\n            d3.select(\"#circleBasicTooltip\")\n            .on(\"mouseover\", function(){return tooltip.style(\"visibility\", \"visible\");})\n            // .on(\"mousemove\", function(){return tooltip.style(\"top\", (event.pageY-800)+\"px\").style(\"left\",(event.pageX-800)+\"px\");})\n            .on(\"mouseout\", function(){return tooltip.style(\"visibility\", \"hidden\");});\n        })\n\n    }\n    render() {\n        return (\n            <div ref =\"scatterChart\">\n            \n         </div>\n        )\n    }\n}\n\n\n\nexport default ScatterPlot\n\n",["45","46"],"/Users/erinsimshauser/github/tech-data-viz/src/BubbleChart.jsx",["47","48","49"],"import React, { Component } from 'react'\nimport './App.css'\n\nimport * as d3 from \"d3\";\nimport BubbleData from './data/counts/adj_counts/angelall_adj_counts.csv'\n\nconst margin = {top: 30, right: 20, bottom: 30, left: 100}\n\nconst MAX_WIDTH = Math.max(1080, window.innerWidth);\nconst MAX_HEIGHT = 720;\n\nlet BUBBLES_WIDTH = 1200, BUBBLES_HEIGHT = 630;\n\n// location to centre the bubbles\nconst centre = { x: window.innerWidth/2, y: BUBBLES_HEIGHT/2 };\n\nlet COLORS_BUBBLE = ['#ffa600',\n    '#ff6e54',\n    '#dd5182',\n    '#955196',\n    '#444e86']\n\n\n\nclass BubbleChart extends Component {\n   constructor(props){\n      super(props)\n      this.startBubble = this.startBubble.bind(this)\n\n   }\n   componentDidMount() {\n      this.startBubble();\n   }\n   // componentDidUpdate() {\n   //    let i =0\n   //    this.startBar(dataSources[i].name, dataSources[i].path, this.refs.chart, COLORS[i]);\n   // }\n\n   startBubble = () => {      \n\n    let svg = d3.select(this.refs.chart)\n        .append('svg')\n        .attr('width', BUBBLES_WIDTH)\n        .attr('height', BUBBLES_HEIGHT)\n\n    d3.csv(BubbleData).then(function(data) {\n\n        // strength to apply to the position forces\n        const forceStrength = 0.03;\n        \n        // these will be set in createNodes and chart functions\n        let bubbles = null;\n        let labels = null;\n        let nodes = [];\n\n        // create a force simulation and add forces to it\n        const simulation = d3.forceSimulation()\n            .force('charge', d3.forceManyBody().strength(d => Math.pow(d.radius, 2.0) * 0.01))\n            // .force('center', d3.forceCenter(centre.x, centre.y))\n            .force('x', d3.forceX().strength(forceStrength).x(centre.x))\n            .force('y', d3.forceY().strength(forceStrength).y(centre.y))\n            .force('collision', d3.forceCollide().radius(d => d.radius + 1));\n\n        // force simulation starts up automatically, which we don't want as there aren't any nodes yet\n        simulation.stop();\n\n        // set up colour scale\n        const fillColour = d3.scaleOrdinal()\n            .domain([\"1\", \"2\", \"3\", \"4\", \"5\"])\n            .range(COLORS_BUBBLE);\n\n        let rawData = data.slice(0,40)\n\n\n        // data manipulation function takes raw data from csv and converts it into an array of node objects\n        // each node will store data and visualisation values to draw a bubble\n        // rawData is expected to be an array of data objects, read in d3.csv\n        // function returns the new node array, with a node for each element in the rawData input\n    \n        // use max size in the data as the max in the scale's domain\n        // note we have to ensure that size is a number\n        const maxSize = d3.max(rawData, d => +d.count);\n\n        // size bubbles based on area\n        const radiusScale = d3.scaleSqrt()\n            .domain([0, maxSize])\n            .range([0, 80])\n\n        // use map() to convert raw data into node data\n        nodes = rawData.map(d => ({\n            ...d,\n            radius: radiusScale(+d.count),\n            size: +d.count,\n            x: Math.random() * 900,\n            y: Math.random() * 800\n        }))\n\n        // callback function called after every tick of the force simulation\n        // here we do the actual repositioning of the circles based on current x and y value of their bound node data\n        // x and y values are modified by the force simulation\n        const ticked = () => {\n            bubbles\n                .attr('cx', d => d.x)\n                .attr('cy', d => d.y)\n\n            labels\n                .attr('x', d => d.x)\n                .attr('y', d => d.y)\n        }\n\n\n        // bind nodes data to circle elements\n        const elements = svg.selectAll('.bubble')\n            .data(nodes, d => d.word)\n            .enter()\n            .append('g')\n\n        bubbles = elements\n            .append('circle')\n            .classed('bubble', true)\n            .attr('r', d => d.radius)\n            .attr('fill', d => fillColour(d.group))\n\n        // labels\n        labels = elements\n            .append('text')\n            .attr('dy', '.3em')\n            .style('text-anchor', 'middle')\n            .style('font-size', 14)\n            .text(d => d.word)\n\n        // set simulation's nodes to our newly created nodes array\n        // simulation starts running automatically once nodes are set\n        simulation.nodes(nodes)\n            .on('tick', ticked)\n            .restart();\n\n         }).catch(function(err) {\n            throw err;\n      });\n   }\n\n\nrender() {\n      return (\n         <div ref =\"chart\">\n         </div>\n\n      )\n   }\n}\nexport default BubbleChart",{"ruleId":"50","replacedBy":"51"},{"ruleId":"52","replacedBy":"53"},{"ruleId":"54","severity":1,"message":"55","line":5,"column":8,"nodeType":"56","messageId":"57","endLine":5,"endColumn":11},{"ruleId":"54","severity":1,"message":"58","line":6,"column":8,"nodeType":"56","messageId":"57","endLine":6,"endColumn":14},{"ruleId":"54","severity":1,"message":"59","line":192,"column":5,"nodeType":"56","messageId":"57","endLine":192,"endColumn":11},{"ruleId":"54","severity":1,"message":"60","line":12,"column":8,"nodeType":"56","messageId":"57","endLine":12,"endColumn":17},{"ruleId":"54","severity":1,"message":"61","line":21,"column":7,"nodeType":"56","messageId":"57","endLine":21,"endColumn":17},{"ruleId":"54","severity":1,"message":"62","line":30,"column":7,"nodeType":"56","messageId":"57","endLine":30,"endColumn":13},{"ruleId":"54","severity":1,"message":"63","line":1,"column":16,"nodeType":"56","messageId":"57","endLine":1,"endColumn":25},{"ruleId":"54","severity":1,"message":"64","line":2,"column":10,"nodeType":"56","messageId":"57","endLine":2,"endColumn":21},{"ruleId":"54","severity":1,"message":"65","line":3,"column":9,"nodeType":"56","messageId":"57","endLine":3,"endColumn":15},{"ruleId":"54","severity":1,"message":"66","line":5,"column":8,"nodeType":"56","messageId":"57","endLine":5,"endColumn":13},{"ruleId":"67","severity":1,"message":"68","line":14,"column":5,"nodeType":"69","messageId":"70","endLine":17,"endColumn":6},{"ruleId":"50","replacedBy":"71"},{"ruleId":"52","replacedBy":"72"},{"ruleId":"54","severity":1,"message":"73","line":7,"column":7,"nodeType":"56","messageId":"57","endLine":7,"endColumn":13},{"ruleId":"54","severity":1,"message":"74","line":9,"column":7,"nodeType":"56","messageId":"57","endLine":9,"endColumn":16},{"ruleId":"54","severity":1,"message":"61","line":10,"column":7,"nodeType":"56","messageId":"57","endLine":10,"endColumn":17},"no-native-reassign",["75"],"no-negated-in-lhs",["76"],"no-unused-vars","'Nav' is defined but never used.","Identifier","unusedVar","'Button' is defined but never used.","'COLORS' is assigned a value but never used.","'FormLabel' is defined but never used.","'MAX_HEIGHT' is assigned a value but never used.","'centre' is assigned a value but never used.","'Component' is defined but never used.","'scaleLinear' is defined but never used.","'extent' is defined but never used.","'d3Tip' is defined but never used.","no-useless-constructor","Useless constructor.","MethodDefinition","noUselessConstructor",["75"],["76"],"'margin' is assigned a value but never used.","'MAX_WIDTH' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]