[{"/Users/erinsimshauser/github/tech-data-viz/src/index.js":"1","/Users/erinsimshauser/github/tech-data-viz/src/reportWebVitals.js":"2","/Users/erinsimshauser/github/tech-data-viz/src/App.jsx":"3","/Users/erinsimshauser/github/tech-data-viz/src/BarChart.jsx":"4","/Users/erinsimshauser/github/tech-data-viz/src/ScatterPlot.jsx":"5","/Users/erinsimshauser/github/tech-data-viz/src/BubbleChart.jsx":"6"},{"size":500,"mtime":1607304107035,"results":"7","hashOfConfig":"8"},{"size":362,"mtime":1607304107036,"results":"9","hashOfConfig":"8"},{"size":12107,"mtime":1607701140665,"results":"10","hashOfConfig":"8"},{"size":5593,"mtime":1607701140674,"results":"11","hashOfConfig":"8"},{"size":3562,"mtime":1607701140691,"results":"12","hashOfConfig":"8"},{"size":4619,"mtime":1607386575153,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},"hslgek",{"filePath":"17","messages":"18","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"19","messages":"20","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"21","messages":"22","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"23","usedDeprecatedRules":"16"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"26","usedDeprecatedRules":"16"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"29","usedDeprecatedRules":"16"},"/Users/erinsimshauser/github/tech-data-viz/src/index.js",[],["30","31"],"/Users/erinsimshauser/github/tech-data-viz/src/reportWebVitals.js",[],"/Users/erinsimshauser/github/tech-data-viz/src/App.jsx",["32","33","34"],"/Users/erinsimshauser/github/tech-data-viz/src/BarChart.jsx",["35","36","37"],"import React, { Component } from 'react'\nimport './App.css'\n\n// import { scaleLinear, scaleBand } from \"d3-scale\"\n\n// import { max } from 'd3-array'\n// import { select } from 'd3-selection'\n\nimport * as d3 from \"d3\";\nimport FormControl from \"@material-ui/core/FormControl\"\nimport RadioGroup from \"@material-ui/core/RadioGroup\"\nimport FormLabel from \"@material-ui/core/FormLabel\"\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\"\nimport Radio from \"@material-ui/core/Radio\"\n\nconst margin = {top: 30, right: 20, bottom: 30, left: 100}\n// width = 960 - margin.left - margin.right,\n// height = 500 - margin.top - margin.bottom;\n\nconst MAX_WIDTH = Math.max(1080, window.innerWidth);\nconst MAX_HEIGHT = 720;\n\nlet bar_width = (MAX_WIDTH / 2) - 150, bar_height = 400;\n\n\n\nlet BUBBLES_WIDTH = 1200, BUBBLES_HEIGHT = 630;\n\n// location to centre the bubbles\nconst centre = { x: BUBBLES_WIDTH/2, y: BUBBLES_HEIGHT/2 };\n\nlet COLORS = {\"news\":'#ff6361',\n    \"companies\":'#bc5090',\n    \"academia\":'#58508d'}\n   //  '#58508d',\n   //  '#005780'}\n\n\n\nclass BarChart extends Component {\n   constructor(props){\n      super(props)\n      this.state = {\n         radioSelector:\"all\"\n      }\n      this.startBar = this.startBar.bind(this)\n\n   }\n   componentDidMount() {\n      this.startBar(\"\", this.props.path, this.refs.chart, COLORS[this.props.type], this.props.data);\n   }\n   // componentDidUpdate() {\n   //    let i =0\n   //    this.startBar(dataSources[i].name, dataSources[i].path, this.refs.chart, COLORS[i]);\n   // }\n\n   startBar = (source, data_path, div_id, color, data) => {\n      let svg_bar = d3.select(div_id)\n         .append(\"svg\")\n         .attr(\"width\", bar_width)\n         .attr(\"height\", bar_height)\n         .append(\"g\")\n         .attr(\"transform\", `translate(${margin.left}, ${margin.top})`);\n      \n      d3.csv(data).then(function(data) {\n         data.forEach(function(d) {\n            d.count = +d.count;\n         });\n         data = data.slice(0,10)\n         \n         let svg = svg_bar;\n\n         // y axis: words\n         let y = d3.scaleBand()\n         .range([0, bar_height - margin.top - margin.bottom])\n         .padding(0.1);  // Improves readability\n\n\n         // x axis: word counts\n         let x = d3.scaleLinear()\n            .domain([0, d3.max(data, function(d) { return d.count; })])\n            .range([0, bar_width -margin.left - margin.right-15]);\n\n         console.log(x)\n\n         console.log(\"max\", d3.max(data, function(d) { return d.count; }))\n\n         // Set up reference to count SVG group\n         let countRef = svg.append(\"g\");\n\n         let y_axis_label = svg.append(\"g\")\n            .style(\"font-size\", \"16px\");\n\n         let x_axis_text = svg.append(\"text\")\n            .attr(\"transform\", `translate(${(bar_width - margin.left - margin.right) / 2},\n                     ${(bar_height - margin.top - margin.bottom) + 15})`)\n            .style(\"text-anchor\", \"middle\");\n            ;\n\n         // y axis: words\n         y.domain(data.map(function(d) { return d.word; }));\n\n\n         y_axis_label.call(d3.axisLeft(y).tickSize(0).tickPadding(10));\n\n         let bars = svg.selectAll(\"rect\")\n            .data(data, function(d) {return d.word});\n         \n         bars.enter()\n            .append(\"rect\")\n            .merge(bars)\n            .transition()\n            .duration(1000)\n            .attr('fill', color)\n            .attr(\"x\", x(0))\n            .attr(\"y\", function(d) { return y(d.word); })\n            .attr(\"width\", function(d) { return x(parseInt(d.count)); })\n            .attr(\"height\",  y.bandwidth());\n\n         let c = countRef.selectAll(\"text\").data(data);\n\n\n         // Render the text elements on the DOM\n         c.enter()\n            .append(\"text\")\n            .merge(c)\n            .transition()\n            .duration(1000)\n            .attr(\"x\", function(d) { return x(parseInt(d.count)) + 10; })       // HINT: Add a small offset to the right edge of the bar, found by x(d.count)\n            .attr(\"y\", function(d) { return y(d.word) + 17})       // HINT: Add a small offset to the top edge of the bar, found by y(d.artist)\n            .style(\"text-anchor\", \"start\")\n            .text(function(d) { return parseInt(d.count)});\n\n         x_axis_text.text(`# occurrences`);\n\n         // Remove elements not in use if fewer groups in new dataset\n         bars.exit().remove();\n         c.exit().remove();\n\n\n         }).catch(function(err) {\n            throw err;\n      });\n   }\n\n   updateData = event => {\n      console.log(event)\n      this.setState({\n         radioSelector: event.target.value\n      })\n   }\n\nrender() {\n      return (\n         <div ref =\"chart\" className=\"bar-chart\">\n            <h4>{this.props.source}</h4>\n            <div className=\"row justify-content-center\">\n            <FormControl component=\"fieldset\">\n               \n            <RadioGroup row  name=\"gender1\" value={this.state.radioSelector} onChange={this.updateData}>\n               <FormControlLabel value=\"all\" control={<Radio />} label=\"All\" />\n               <FormControlLabel value=\"verbs\" control={<Radio />} label=\"Verbs\" />\n               <FormControlLabel value=\"adjectives\" control={<Radio />} label=\"Adjectives\" />\n            </RadioGroup>\n            </FormControl>\n            </div>\n         </div>\n\n      )\n   }\n}\nexport default BarChart","/Users/erinsimshauser/github/tech-data-viz/src/ScatterPlot.jsx",["38","39","40","41","42"],"import React, {Component} from \"react\";\nimport { scaleLinear } from \"d3-scale\";\nimport {extent} from \"d3-array\"\nimport * as d3 from \"d3\";\nimport d3Tip from \"d3-tip\";\nimport ScatterData from './data/counts/sentiments.csv'\n\nlet COLORS = {\"news\":'#ff6361',\n    \"company\":'#bc5090',\n    \"academia\":'#58508d'}\n\n// Scatterplot\nclass ScatterPlot extends React.Component {\n    constructor(props) {\n        super(props);\n\n    }\n    componentDidMount() {\n        this.startScatter(this.refs.scatterChart);\n    }\n    // Whenever the component updates, select the <g> from the DOM, and use D3 to manipulte circles\n    componentDidUpdate() {\n        this.startScatter(this.refs.scatterChart);\n    }\n \n    startScatter = (div_id) => {\n        // set the dimensions and margins of the graph\n        var margin = {top: 10, right: 30, bottom: 30, left: 60},\n        width = 860 - margin.left - margin.right,\n        height = 600 - margin.top - margin.bottom;\n\n        // append the svg object to the body of the page\n        let svg_scatter = d3.select(div_id)\n            .append(\"svg\")\n            .attr(\"width\", width + margin.left + margin.right)\n            .attr(\"height\", height + margin.top + margin.bottom)\n            .append(\"g\")\n            .attr(\"transform\",\n                \"translate(\" + margin.left + \",\" + margin.top + \")\");\n\n        //Read the data\n        d3.csv(ScatterData).then(function(data) {\n\n            // data.forEach(function(d) {\n            //     d.subjectivity = +d.subjectivity;\n            //     d.polarity = +d.polarity;\n            // });\n\n\n            console.log(data)\n            // Add X axis\n            var x = d3.scaleLinear()\n                .domain([0, 1])\n                .range([ 0, width ]);\n            svg_scatter.append(\"g\")\n                .attr(\"transform\", \"translate(0,\" + height + \")\")\n                .call(d3.axisBottom(x));\n\n            // Add Y axis\n            var y = d3.scaleLinear()\n                .domain([0, 1])\n                .range([ height, 0]);\n                \n            svg_scatter.append(\"g\")\n                .call(d3.axisLeft(y));\n\n            // Add dots\n            var dots = svg_scatter.append(\"g\")\n                .selectAll(\"dot\")\n                .data(data)\n\n            dots.enter()\n                .append(\"circle\")\n                .attr(\"id\", \"circleBasicTooltip\")\n                .attr(\"cx\", (d)=> x(d.polarity))\n                .attr(\"cy\", (d) => y(d.subjectivity))\n                .attr(\"r\", 8)\n                .style(\"fill\", (d)=>COLORS[d.type])\n                .append(\"text\")\n                    // .style(\"text-anchor\", \"middle\")\n                // .attr(\"dy\", -10)\n                    .text((d) => d.source)\n            \n            // create a tooltip\n            var tooltip = d3.select(div_id)\n                .append(\"div\")\n                .style(\"position\", \"absolute\")\n                .style(\"visibility\", \"hidden\")\n                .text(\"I'm a circle!\");\n            d3.select(\"#circleBasicTooltip\")\n            .on(\"mouseover\", function(){return tooltip.style(\"visibility\", \"visible\");})\n            // .on(\"mousemove\", function(){return tooltip.style(\"top\", (event.pageY-800)+\"px\").style(\"left\",(event.pageX-800)+\"px\");})\n            .on(\"mouseout\", function(){return tooltip.style(\"visibility\", \"hidden\");});\n        })\n\n    }\n    render() {\n        return (\n            <div ref =\"scatterChart\">\n            \n         </div>\n        )\n    }\n}\n\n\n\nexport default ScatterPlot\n\n","/Users/erinsimshauser/github/tech-data-viz/src/BubbleChart.jsx",["43","44","45"],"import React, { Component } from 'react'\nimport './App.css'\n\nimport * as d3 from \"d3\";\nimport BubbleData from './data/counts/adj_counts/angelall_adj_counts.csv'\n\nconst margin = {top: 30, right: 20, bottom: 30, left: 100}\n\nconst MAX_WIDTH = Math.max(1080, window.innerWidth);\nconst MAX_HEIGHT = 720;\n\nlet BUBBLES_WIDTH = 1200, BUBBLES_HEIGHT = 630;\n\n// location to centre the bubbles\nconst centre = { x: window.innerWidth/2, y: BUBBLES_HEIGHT/2 };\n\nlet COLORS_BUBBLE = ['#ffa600',\n    '#ff6e54',\n    '#dd5182',\n    '#955196',\n    '#444e86']\n\n\n\nclass BubbleChart extends Component {\n   constructor(props){\n      super(props)\n      this.startBubble = this.startBubble.bind(this)\n\n   }\n   componentDidMount() {\n      this.startBubble();\n   }\n   // componentDidUpdate() {\n   //    let i =0\n   //    this.startBar(dataSources[i].name, dataSources[i].path, this.refs.chart, COLORS[i]);\n   // }\n\n   startBubble = () => {      \n\n    let svg = d3.select(this.refs.chart)\n        .append('svg')\n        .attr('width', BUBBLES_WIDTH)\n        .attr('height', BUBBLES_HEIGHT)\n\n    d3.csv(BubbleData).then(function(data) {\n\n        // strength to apply to the position forces\n        const forceStrength = 0.03;\n        \n        // these will be set in createNodes and chart functions\n        let bubbles = null;\n        let labels = null;\n        let nodes = [];\n\n        // create a force simulation and add forces to it\n        const simulation = d3.forceSimulation()\n            .force('charge', d3.forceManyBody().strength(d => Math.pow(d.radius, 2.0) * 0.01))\n            // .force('center', d3.forceCenter(centre.x, centre.y))\n            .force('x', d3.forceX().strength(forceStrength).x(centre.x))\n            .force('y', d3.forceY().strength(forceStrength).y(centre.y))\n            .force('collision', d3.forceCollide().radius(d => d.radius + 1));\n\n        // force simulation starts up automatically, which we don't want as there aren't any nodes yet\n        simulation.stop();\n\n        // set up colour scale\n        const fillColour = d3.scaleOrdinal()\n            .domain([\"1\", \"2\", \"3\", \"4\", \"5\"])\n            .range(COLORS_BUBBLE);\n\n        let rawData = data.slice(0,40)\n\n\n        // data manipulation function takes raw data from csv and converts it into an array of node objects\n        // each node will store data and visualisation values to draw a bubble\n        // rawData is expected to be an array of data objects, read in d3.csv\n        // function returns the new node array, with a node for each element in the rawData input\n    \n        // use max size in the data as the max in the scale's domain\n        // note we have to ensure that size is a number\n        const maxSize = d3.max(rawData, d => +d.count);\n\n        // size bubbles based on area\n        const radiusScale = d3.scaleSqrt()\n            .domain([0, maxSize])\n            .range([0, 80])\n\n        // use map() to convert raw data into node data\n        nodes = rawData.map(d => ({\n            ...d,\n            radius: radiusScale(+d.count),\n            size: +d.count,\n            x: Math.random() * 900,\n            y: Math.random() * 800\n        }))\n\n        // callback function called after every tick of the force simulation\n        // here we do the actual repositioning of the circles based on current x and y value of their bound node data\n        // x and y values are modified by the force simulation\n        const ticked = () => {\n            bubbles\n                .attr('cx', d => d.x)\n                .attr('cy', d => d.y)\n\n            labels\n                .attr('x', d => d.x)\n                .attr('y', d => d.y)\n        }\n\n\n        // bind nodes data to circle elements\n        const elements = svg.selectAll('.bubble')\n            .data(nodes, d => d.word)\n            .enter()\n            .append('g')\n\n        bubbles = elements\n            .append('circle')\n            .classed('bubble', true)\n            .attr('r', d => d.radius)\n            .attr('fill', d => fillColour(d.group))\n\n        // labels\n        labels = elements\n            .append('text')\n            .attr('dy', '.3em')\n            .style('text-anchor', 'middle')\n            .style('font-size', 14)\n            .text(d => d.word)\n\n        // set simulation's nodes to our newly created nodes array\n        // simulation starts running automatically once nodes are set\n        simulation.nodes(nodes)\n            .on('tick', ticked)\n            .restart();\n\n         }).catch(function(err) {\n            throw err;\n      });\n   }\n\n\nrender() {\n      return (\n         <div ref =\"chart\">\n         </div>\n\n      )\n   }\n}\nexport default BubbleChart",{"ruleId":"46","replacedBy":"47"},{"ruleId":"48","replacedBy":"49"},{"ruleId":"50","severity":1,"message":"51","line":5,"column":8,"nodeType":"52","messageId":"53","endLine":5,"endColumn":11},{"ruleId":"50","severity":1,"message":"54","line":6,"column":8,"nodeType":"52","messageId":"53","endLine":6,"endColumn":14},{"ruleId":"50","severity":1,"message":"55","line":132,"column":5,"nodeType":"52","messageId":"53","endLine":132,"endColumn":11},{"ruleId":"50","severity":1,"message":"56","line":12,"column":8,"nodeType":"52","messageId":"53","endLine":12,"endColumn":17},{"ruleId":"50","severity":1,"message":"57","line":21,"column":7,"nodeType":"52","messageId":"53","endLine":21,"endColumn":17},{"ruleId":"50","severity":1,"message":"58","line":30,"column":7,"nodeType":"52","messageId":"53","endLine":30,"endColumn":13},{"ruleId":"50","severity":1,"message":"59","line":1,"column":16,"nodeType":"52","messageId":"53","endLine":1,"endColumn":25},{"ruleId":"50","severity":1,"message":"60","line":2,"column":10,"nodeType":"52","messageId":"53","endLine":2,"endColumn":21},{"ruleId":"50","severity":1,"message":"61","line":3,"column":9,"nodeType":"52","messageId":"53","endLine":3,"endColumn":15},{"ruleId":"50","severity":1,"message":"62","line":5,"column":8,"nodeType":"52","messageId":"53","endLine":5,"endColumn":13},{"ruleId":"63","severity":1,"message":"64","line":14,"column":5,"nodeType":"65","messageId":"66","endLine":17,"endColumn":6},{"ruleId":"50","severity":1,"message":"67","line":7,"column":7,"nodeType":"52","messageId":"53","endLine":7,"endColumn":13},{"ruleId":"50","severity":1,"message":"68","line":9,"column":7,"nodeType":"52","messageId":"53","endLine":9,"endColumn":16},{"ruleId":"50","severity":1,"message":"57","line":10,"column":7,"nodeType":"52","messageId":"53","endLine":10,"endColumn":17},"no-native-reassign",["69"],"no-negated-in-lhs",["70"],"no-unused-vars","'Nav' is defined but never used.","Identifier","unusedVar","'Button' is defined but never used.","'COLORS' is assigned a value but never used.","'FormLabel' is defined but never used.","'MAX_HEIGHT' is assigned a value but never used.","'centre' is assigned a value but never used.","'Component' is defined but never used.","'scaleLinear' is defined but never used.","'extent' is defined but never used.","'d3Tip' is defined but never used.","no-useless-constructor","Useless constructor.","MethodDefinition","noUselessConstructor","'margin' is assigned a value but never used.","'MAX_WIDTH' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]
