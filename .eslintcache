[{"/Users/katiefriis/Documents/course/cs2952v/tech-data-viz/src/index.js":"1","/Users/katiefriis/Documents/course/cs2952v/tech-data-viz/src/reportWebVitals.js":"2","/Users/katiefriis/Documents/course/cs2952v/tech-data-viz/src/App.jsx":"3","/Users/katiefriis/Documents/course/cs2952v/tech-data-viz/src/BubbleChart.jsx":"4","/Users/katiefriis/Documents/course/cs2952v/tech-data-viz/src/ScatterPlot.jsx":"5","/Users/katiefriis/Documents/course/cs2952v/tech-data-viz/src/BarChart.jsx":"6"},{"size":500,"mtime":499162500000,"results":"7","hashOfConfig":"8"},{"size":362,"mtime":499162500000,"results":"9","hashOfConfig":"8"},{"size":12412,"mtime":1607713306052,"results":"10","hashOfConfig":"8"},{"size":4619,"mtime":1607309384666,"results":"11","hashOfConfig":"8"},{"size":5027,"mtime":1607713472476,"results":"12","hashOfConfig":"8"},{"size":5592,"mtime":1607705685230,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},"uvbdxb",{"filePath":"17","messages":"18","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"19","messages":"20","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"21","messages":"22","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"23","usedDeprecatedRules":"16"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"26","messages":"27","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/Users/katiefriis/Documents/course/cs2952v/tech-data-viz/src/index.js",[],["28","29"],"/Users/katiefriis/Documents/course/cs2952v/tech-data-viz/src/reportWebVitals.js",[],"/Users/katiefriis/Documents/course/cs2952v/tech-data-viz/src/App.jsx",["30","31","32"],"/Users/katiefriis/Documents/course/cs2952v/tech-data-viz/src/BubbleChart.jsx",["33","34","35"],"import React, { Component } from 'react'\nimport './App.css'\n\nimport * as d3 from \"d3\";\nimport BubbleData from './data/counts/adj_counts/angelall_adj_counts.csv'\n\nconst margin = {top: 30, right: 20, bottom: 30, left: 100}\n\nconst MAX_WIDTH = Math.max(1080, window.innerWidth);\nconst MAX_HEIGHT = 720;\n\nlet BUBBLES_WIDTH = 1200, BUBBLES_HEIGHT = 630;\n\n// location to centre the bubbles\nconst centre = { x: window.innerWidth/2, y: BUBBLES_HEIGHT/2 };\n\nlet COLORS_BUBBLE = ['#ffa600',\n    '#ff6e54',\n    '#dd5182',\n    '#955196',\n    '#444e86']\n\n\n\nclass BubbleChart extends Component {\n   constructor(props){\n      super(props)\n      this.startBubble = this.startBubble.bind(this)\n\n   }\n   componentDidMount() {\n      this.startBubble();\n   }\n   // componentDidUpdate() {\n   //    let i =0\n   //    this.startBar(dataSources[i].name, dataSources[i].path, this.refs.chart, COLORS[i]);\n   // }\n\n   startBubble = () => {      \n\n    let svg = d3.select(this.refs.chart)\n        .append('svg')\n        .attr('width', BUBBLES_WIDTH)\n        .attr('height', BUBBLES_HEIGHT)\n\n    d3.csv(BubbleData).then(function(data) {\n\n        // strength to apply to the position forces\n        const forceStrength = 0.03;\n        \n        // these will be set in createNodes and chart functions\n        let bubbles = null;\n        let labels = null;\n        let nodes = [];\n\n        // create a force simulation and add forces to it\n        const simulation = d3.forceSimulation()\n            .force('charge', d3.forceManyBody().strength(d => Math.pow(d.radius, 2.0) * 0.01))\n            // .force('center', d3.forceCenter(centre.x, centre.y))\n            .force('x', d3.forceX().strength(forceStrength).x(centre.x))\n            .force('y', d3.forceY().strength(forceStrength).y(centre.y))\n            .force('collision', d3.forceCollide().radius(d => d.radius + 1));\n\n        // force simulation starts up automatically, which we don't want as there aren't any nodes yet\n        simulation.stop();\n\n        // set up colour scale\n        const fillColour = d3.scaleOrdinal()\n            .domain([\"1\", \"2\", \"3\", \"4\", \"5\"])\n            .range(COLORS_BUBBLE);\n\n        let rawData = data.slice(0,40)\n\n\n        // data manipulation function takes raw data from csv and converts it into an array of node objects\n        // each node will store data and visualisation values to draw a bubble\n        // rawData is expected to be an array of data objects, read in d3.csv\n        // function returns the new node array, with a node for each element in the rawData input\n    \n        // use max size in the data as the max in the scale's domain\n        // note we have to ensure that size is a number\n        const maxSize = d3.max(rawData, d => +d.count);\n\n        // size bubbles based on area\n        const radiusScale = d3.scaleSqrt()\n            .domain([0, maxSize])\n            .range([0, 80])\n\n        // use map() to convert raw data into node data\n        nodes = rawData.map(d => ({\n            ...d,\n            radius: radiusScale(+d.count),\n            size: +d.count,\n            x: Math.random() * 900,\n            y: Math.random() * 800\n        }))\n\n        // callback function called after every tick of the force simulation\n        // here we do the actual repositioning of the circles based on current x and y value of their bound node data\n        // x and y values are modified by the force simulation\n        const ticked = () => {\n            bubbles\n                .attr('cx', d => d.x)\n                .attr('cy', d => d.y)\n\n            labels\n                .attr('x', d => d.x)\n                .attr('y', d => d.y)\n        }\n\n\n        // bind nodes data to circle elements\n        const elements = svg.selectAll('.bubble')\n            .data(nodes, d => d.word)\n            .enter()\n            .append('g')\n\n        bubbles = elements\n            .append('circle')\n            .classed('bubble', true)\n            .attr('r', d => d.radius)\n            .attr('fill', d => fillColour(d.group))\n\n        // labels\n        labels = elements\n            .append('text')\n            .attr('dy', '.3em')\n            .style('text-anchor', 'middle')\n            .style('font-size', 14)\n            .text(d => d.word)\n\n        // set simulation's nodes to our newly created nodes array\n        // simulation starts running automatically once nodes are set\n        simulation.nodes(nodes)\n            .on('tick', ticked)\n            .restart();\n\n         }).catch(function(err) {\n            throw err;\n      });\n   }\n\n\nrender() {\n      return (\n         <div ref =\"chart\">\n         </div>\n\n      )\n   }\n}\nexport default BubbleChart","/Users/katiefriis/Documents/course/cs2952v/tech-data-viz/src/ScatterPlot.jsx",["36","37","38","39","40","41"],"/Users/katiefriis/Documents/course/cs2952v/tech-data-viz/src/BarChart.jsx",["42","43","44","45","46","47"],{"ruleId":"48","replacedBy":"49"},{"ruleId":"50","replacedBy":"51"},{"ruleId":"52","severity":1,"message":"53","line":5,"column":8,"nodeType":"54","messageId":"55","endLine":5,"endColumn":11},{"ruleId":"52","severity":1,"message":"56","line":6,"column":8,"nodeType":"54","messageId":"55","endLine":6,"endColumn":14},{"ruleId":"52","severity":1,"message":"57","line":132,"column":5,"nodeType":"54","messageId":"55","endLine":132,"endColumn":11},{"ruleId":"52","severity":1,"message":"58","line":7,"column":7,"nodeType":"54","messageId":"55","endLine":7,"endColumn":13},{"ruleId":"52","severity":1,"message":"59","line":9,"column":7,"nodeType":"54","messageId":"55","endLine":9,"endColumn":16},{"ruleId":"52","severity":1,"message":"60","line":10,"column":7,"nodeType":"54","messageId":"55","endLine":10,"endColumn":17},{"ruleId":"52","severity":1,"message":"61","line":1,"column":16,"nodeType":"54","messageId":"55","endLine":1,"endColumn":25},{"ruleId":"52","severity":1,"message":"62","line":2,"column":10,"nodeType":"54","messageId":"55","endLine":2,"endColumn":21},{"ruleId":"52","severity":1,"message":"63","line":3,"column":9,"nodeType":"54","messageId":"55","endLine":3,"endColumn":15},{"ruleId":"52","severity":1,"message":"64","line":5,"column":8,"nodeType":"54","messageId":"55","endLine":5,"endColumn":13},{"ruleId":"65","severity":1,"message":"66","line":17,"column":5,"nodeType":"67","messageId":"68","endLine":20,"endColumn":6},{"ruleId":"52","severity":1,"message":"69","line":86,"column":21,"nodeType":"54","messageId":"55","endLine":86,"endColumn":31},{"ruleId":"52","severity":1,"message":"70","line":12,"column":8,"nodeType":"54","messageId":"55","endLine":12,"endColumn":17},{"ruleId":"52","severity":1,"message":"60","line":21,"column":7,"nodeType":"54","messageId":"55","endLine":21,"endColumn":17},{"ruleId":"52","severity":1,"message":"71","line":30,"column":7,"nodeType":"54","messageId":"55","endLine":30,"endColumn":13},{"ruleId":"72","severity":1,"message":"73","line":161,"column":15,"nodeType":"74","messageId":"75","endLine":161,"endColumn":17},{"ruleId":"72","severity":1,"message":"73","line":163,"column":22,"nodeType":"74","messageId":"75","endLine":163,"endColumn":24},{"ruleId":"72","severity":1,"message":"73","line":165,"column":22,"nodeType":"74","messageId":"75","endLine":165,"endColumn":24},"no-native-reassign",["76"],"no-negated-in-lhs",["77"],"no-unused-vars","'Nav' is defined but never used.","Identifier","unusedVar","'Button' is defined but never used.","'COLORS' is assigned a value but never used.","'margin' is assigned a value but never used.","'MAX_WIDTH' is assigned a value but never used.","'MAX_HEIGHT' is assigned a value but never used.","'Component' is defined but never used.","'scaleLinear' is defined but never used.","'extent' is defined but never used.","'d3Tip' is defined but never used.","no-useless-constructor","Useless constructor.","MethodDefinition","noUselessConstructor","'color_span' is assigned a value but never used.","'FormLabel' is defined but never used.","'centre' is assigned a value but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","no-global-assign","no-unsafe-negation"]